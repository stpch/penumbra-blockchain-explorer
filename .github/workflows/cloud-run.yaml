name: Deploy Next.js application to Google Cloud Run

on:
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Build application
        # run: npx --no-install next build
        run: npm run build

      - name: Check types
        run: npm run typecheck

      - name: Lint JavaScript
        run: npm run lint

      - name: Lint CSS
        run: npm run stylelint

      # - name: Run tests with coverage
      #   run: npm run test:coverage

      # - name: Upload coverage report
      #   uses: codecov/codecov-action@v5
      #   with:
      #     token: ${{ secrets.CODECOV_TOKEN }}

      - name: Cache .next directory
        uses: actions/cache@v4
        with:
          path: .next
          key: ${{ runner.os }}-next-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
              ${{ runner.os }}-next-

  deploy:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Configure gcloud
        run: |
          gcloud config set compute/region ${{ secrets.GCP_REGION }}

      - name: Trigger Cloud Build
        run: |
          RESPONSE=$(gcloud builds submit --config cloudbuild.yaml --substitutions=_BRANCH_NAME=${{ github.ref_name }},_COMMIT_SHA=${{ github.sha }},_REGION=${{ secrets.GCP_REGION }} --async --format="json")
          BUILD_ID=$(echo "$RESPONSE" | jq -r '.name' | cut -d'/' -f2)
          echo "BUILD_ID=$BUILD_ID" >> $GITHUB_ENV
          echo "Cloud Build ID is $BUILD_ID"

      - name: Monitor Cloud Build status
        run: |
          STATUS="WORKING"

          while [[ "$STATUS" == "WORKING" || "$STATUS" == "QUEUED" ]]; do
            sleep 10
            STATUS=$(gcloud builds describe $BUILD_ID --format="value(status)")
            echo "Current build status: $STATUS"
          done

          if [[ "$STATUS" != "SUCCESS" ]]; then
            echo "Cloud Build failed with status: $STATUS"
            exit 1
          fi

          echo "Cloud Build completed successfully."
